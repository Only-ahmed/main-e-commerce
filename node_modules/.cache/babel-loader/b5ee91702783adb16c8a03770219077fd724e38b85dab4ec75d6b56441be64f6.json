{"ast":null,"code":"import { Categories, ProductsPage } from '../../../Data/data';\n\n// export const action1 = (dispatch, test1, test2) => {\n//     let NewArray = 0\n//     if (test1) {\n//         NewArray += 1\n//     } else if (test2) {\n//         NewArray -= 1\n//     }\n//     dispatch({ type: 'action1', payload: console.log(NewArray) })\n// }\n\n// export const appearCat = (dispatch, Cat) => {\n//     const NewArray = []\n//     for (let i in Cat) {\n//         for (let f in Cat[i]) {\n//             for (let g in Cat[i][f]) {\n//                 NewArray.push(Cat[i][f][g])\n//                 dispatch({ type: 'supermarket', Cat: Categories.supermarket })\n//                 dispatch({ type: 'Fashion', Cat2: Categories.Fashion })\n//                 dispatch({ type: 'HealthBeauty', Cat3: Categories.Fashion })\n//             }\n//         }\n//     }\n// }\n\nexport const appear = cat => {\n  return async dispatch => {\n    const NewArray = {};\n    await (\n      // for (let i in Categories.supermarket) {\n      //     for (let f in Categories.supermarket[i]) {\n      //         for (let g in Categories.supermarket[i][f]) {\n      //             NewArray.push(Categories.supermarket[i][f][g])\n      //             // dispatch({ type: 'supermarket', Cat: Categories.supermarket })\n      //             // dispatch({ type: 'Fashion', Cat2: Categories.Fashion })\n      //             // dispatch({ type: 'HealthBeauty', Cat3: Categories.Fashion })\n      //         }\n      //     }\n      // }\n      dispatch({\n        type: 'supermarket',\n        payload: NewArray + cat\n      })\n    );\n  };\n};","map":{"version":3,"names":["Categories","ProductsPage","appear","cat","dispatch","NewArray","type","payload"],"sources":["C:/Users/Ahmed/Desktop/مكررات/e-commerce/src/components/redux/actions/ReduxActions.js"],"sourcesContent":["import { Categories, ProductsPage, } from '../../../Data/data'\r\n\r\n\r\n\r\n// export const action1 = (dispatch, test1, test2) => {\r\n//     let NewArray = 0\r\n//     if (test1) {\r\n//         NewArray += 1\r\n//     } else if (test2) {\r\n//         NewArray -= 1\r\n//     }\r\n//     dispatch({ type: 'action1', payload: console.log(NewArray) })\r\n// }\r\n\r\n// export const appearCat = (dispatch, Cat) => {\r\n//     const NewArray = []\r\n//     for (let i in Cat) {\r\n//         for (let f in Cat[i]) {\r\n//             for (let g in Cat[i][f]) {\r\n//                 NewArray.push(Cat[i][f][g])\r\n//                 dispatch({ type: 'supermarket', Cat: Categories.supermarket })\r\n//                 dispatch({ type: 'Fashion', Cat2: Categories.Fashion })\r\n//                 dispatch({ type: 'HealthBeauty', Cat3: Categories.Fashion })\r\n//             }\r\n//         }\r\n//     }\r\n// }\r\n\r\nexport const appear = (cat) => {\r\n    return async (dispatch) => {\r\n        const NewArray = {}\r\n        await\r\n            // for (let i in Categories.supermarket) {\r\n            //     for (let f in Categories.supermarket[i]) {\r\n            //         for (let g in Categories.supermarket[i][f]) {\r\n            //             NewArray.push(Categories.supermarket[i][f][g])\r\n            //             // dispatch({ type: 'supermarket', Cat: Categories.supermarket })\r\n            //             // dispatch({ type: 'Fashion', Cat2: Categories.Fashion })\r\n            //             // dispatch({ type: 'HealthBeauty', Cat3: Categories.Fashion })\r\n            //         }\r\n            //     }\r\n            // }\r\n            dispatch({\r\n                type: 'supermarket',\r\n                payload: NewArray + cat\r\n            });\r\n    };\r\n}"],"mappings":"AAAA,SAASA,UAAU,EAAEC,YAAY,QAAS,oBAAoB;;AAI9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,MAAM,GAAIC,GAAG,IAAK;EAC3B,OAAO,MAAOC,QAAQ,IAAK;IACvB,MAAMC,QAAQ,GAAG,CAAC,CAAC;IACnB;MACI;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACAD,QAAQ,CAAC;QACLE,IAAI,EAAE,aAAa;QACnBC,OAAO,EAAEF,QAAQ,GAAGF;MACxB,CAAC;IAAC;EACV,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}